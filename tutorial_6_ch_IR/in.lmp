# ----------------- Init Section -----------------
clear

variable    temp index 298.0 # K

# ----------------- Atom Definition Section -----------------
units       real
atom_style  charge
dimension   3
boundary    p p p
read_data   data.ch
replicate   1 1 1

mass 1 12.0107 # C
mass 2 1.00794 # H
mass 3 15.9994 # O

# ----- Potential settings -----
pair_style         reax/c lmp_control
pair_coeff         * * ffield.reax.cho C H O
fix                2 all qeq/reax 1 0.0 10.0 1e-6 param.qeq

# ----------------- Settings Section -----------------
timestep           0.5 # 0.5 fs
thermo             200

# ----- Output setting -----
#dump               d1 all cfg 100 cfg/run.*.cfg mass type xs ys zs id type
#dump_modify        d1 element C H O

# ----- Check equilibriation setting -----
variable           energy equal etotal
variable           temperature equal temp
fix                f1 all ave/time 1 100 100 v_energy v_temperature file out_energy.txt

# ----------------- Run Section -----------------
#equilibration
run                0
velocity           all create ${temp} 123456
fix                1 all nvt temp ${temp} ${temp} $(100.0*dt)
run                40000 # 20 ps
unfix              f1
reset_timestep     0

#calculate dipole moment vector
#WARNING: This definition of the dipole moment is ONLY valid when the system has 0 net charge, so you should verify that before use.
compute            1 all property/atom q xu yu zu
variable           dipolex atom c_1[1]*c_1[2]
variable           dipoley atom c_1[1]*c_1[3]
variable           dipolez atom c_1[1]*c_1[4]
compute            2 all reduce sum v_dipolex
compute            3 all reduce sum v_dipoley
compute            4 all reduce sum v_dipolez
variable           totaldipolex equal c_2
variable           totaldipoley equal c_3
variable           totaldipolez equal c_4
variable           mytime equal step*dt
fix                printdipole all ave/time 1 1 2 v_mytime v_totaldipolex v_totaldipoley v_totaldipolez file dipole.txt mode scalar format %.10f
#Note that printing every 1 fs, as I do here, gets you wavenumbers up to the Nyquist frequency, 0.5/1 fs^-1 = 16,678 cm^-1.
#Printing every 2 fs only gets you wavenumbers up to 0.5/2 fs^-1 = 8,339 cm^-1, and so on.
#This indicates that you only need to print every 5 ns to have the IR spectra up to 3340 cm^-1, but this is incorrect. 
#Per the Nyquist-Shannon sampling theorem, you need to sample the system at a frequency greater than or equal to 2*f, where f is the highest frequency contained in the system.
#Otherwise, aliasing errors occur, and the FFT will show the higher frequency signals at a lower frequency than they are.
#Thus, if the highest-frequency bond in your system has a characteristic period of 20 fs, you need to print out at least every 10 fs.
#If you want to get around this, you'll need to apply a lowpass filter (aka an anti-aliasing filter) to get rid of the high frequency signals before you do the FFT. This is not implemented in this code.
#It makes more sense to print out frequently enough rather than to apply a filter; if you're doing MD, your timestep must be high enough to account for the high-frequency signal anyway, so the information is there!
#The only good reason for a filter in this case is if you want to sample a very long trajectory and storing it is computationally prohibitive.

#production
run                1000000
#Note that running for 1,000,000 times the printout frequency, as I do here, gets you wavenumbers at 1,000,000 increments between 0 and the maximum wavenumber.
#If you only use the autocorrelation function up to 0.01 times the trajectory length for statistical purposes, then you only get 10,000 increments.
#e.g., you get the intensity calculated at every 16,678/9,999 = 1.668 cm^-1.
#Running for longer increases this precision, and also it betters the statistics of the spectra.
